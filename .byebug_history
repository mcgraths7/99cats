exit
arel_requests.where(cat_id: cat_id)
arel_requests
continue
arel_requests.where(arel_requests[:cat_id].eq(cat_id)).count
arel_requests.where(arel_requests[:cat_id].eq(cat_id))
exit
start_date > request.start_date 
end_date < request.start_date
end_date < request.end_date
end_date
start_date > request.start_date
request.start_date
start_date
exit
range(request_start_date_time..request_end_date_time)
request_end_date_time
request_start_date_time
end_date_time
start_date_time
exit
DateTime.new(start_date.year, start_date.month, start_date.day)
start_date.day
start_date.month
start_date.year
DateTime.new(start_date)
Datetime.new(start_date)
start_date..end_date.cover?(request.start_date)
request.start_date === start_date..end_date
start_date..end_date
start_date
self
request
exit
requests.each do |request|
requests.count
exit
requests.where(end_date: start_date...end_date).where(start_date: start_date...end_date).count
requests.where(end_date: start_date...end_date).and(requests.where(start_date: start_date...end_date)).count
requests.each { |request| pp request }
self
requests.each { |request| pp request }
requests.each do { |request| pp request }
requests
self
requests.where(end_date: start_date...end_date).or(requests.where(start_date: start_date...end_date)).count
requests.where(end_date: start_date...end_date).or(start_date: start_date...end_date).count
requests.where(end_date: start_date...end_date).each do |request|
load 'pp'
require 'pp'
requests.where(end_date: start_date...end_date).count
requests.where(start_date: start_date...end_date).count
requests.where(start_date: start_date...end_date)
requests.count
requests
exit
overlapping.count
exit
(overlapping_start + overlapping_end).count
overlapping_start.merge(overlapping_end).count
overlapping_start.count
overlapping_end.count
overlapping_end
exit
self.overlapping_requests
self
exit
self
exit
self
exit
request.update(status: 'APPROVED')
CatRentalRequest.where(status: 'APPROVED').count
request
exit
request
continue
request
request.update!(status: 'APPROVED')
exit
request.overlapping_requests.empty?
request.overlapping_requests
request.save!
request
exit
request.update(status: 'DENIED')
request.save!
request
